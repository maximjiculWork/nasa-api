{"version":3,"sources":["Navbar.jsx","AppDescription.jsx","MainGenerator.jsx","Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","AppDescription","to","MainGenerator","useState","imageUrl","setImageUrl","waitingText","setWaitingText","descriptionText","setDescriptionText","currentYear","Date","getFullYear","daysArr","yearArr","i","push","daySelection","React","createRef","monthSelection","yearSelection","API_KEY","a","fetch","current","value","response","json","data","url","explanation","name","defaultValue","ref","map","day","index","key","month","year","id","onClick","gettingData","src","alt","Footer","href","target","App","basename","process","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bc951978.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <h1>Astronomy Picture of the Day</h1>\r\n      <h1 className=\"navbar__nasa-heading\">NASA API</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport default function AppDescription() {\r\n  return (\r\n    <div className=\"app-descr\">\r\n      <h2>This app shows Astronomy Picture of the Day</h2>\r\n      <NavLink className=\"btn\" to=\"nasa-pod\">\r\n        Get started\r\n      </NavLink>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport default function MainGenerator() {\r\n  const [imageUrl, setImageUrl] = useState(\"./img/nasa-image.png\");\r\n  const [waitingText, setWaitingText] = useState(\"\");\r\n  const [descriptionText, setDescriptionText] = useState(\"\");\r\n\r\n  let date = new Date();\r\n  let currentYear = date.getFullYear();\r\n  let daysArr = [];\r\n  let monthsArr = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  let yearArr = [];\r\n  for (let i = 1; i <= 31; i++) {\r\n    daysArr.push(i);\r\n  }\r\n  for (let i = 1996; i <= currentYear; i++) {\r\n    yearArr.push(i);\r\n  }\r\n\r\n  let daySelection = React.createRef();\r\n  let monthSelection = React.createRef();\r\n  let yearSelection = React.createRef();\r\n\r\n  let API_KEY = \"nnkr1eH8UxErndoIzsJRidacRRezP9iZzH7BjB7E\";\r\n\r\n  const say = () => {\r\n    switch (monthSelection.current.value) {\r\n      case \"January\":\r\n        monthSelection = 1;\r\n        break;\r\n      case \"February\":\r\n        monthSelection = 2;\r\n        break;\r\n      case \"March\":\r\n        monthSelection = 3;\r\n        break;\r\n      case \"April\":\r\n        monthSelection = 4;\r\n        break;\r\n      case \"May\":\r\n        monthSelection = 5;\r\n        break;\r\n      case \"June\":\r\n        monthSelection = 6;\r\n        break;\r\n      case \"July\":\r\n        monthSelection = 7;\r\n        break;\r\n      case \"August\":\r\n        monthSelection = 8;\r\n        break;\r\n      case \"September\":\r\n        monthSelection = 9;\r\n        break;\r\n      case \"October\":\r\n        monthSelection = 10;\r\n        break;\r\n      case \"November\":\r\n        monthSelection = 11;\r\n        break;\r\n      case \"December\":\r\n        monthSelection = 12;\r\n        break;\r\n    }\r\n    gettingData();\r\n    setWaitingText(\"It can take some time\");\r\n  };\r\n\r\n  async function gettingData() {\r\n    let response = await fetch(\r\n      `https://api.nasa.gov/planetary/apod?api_key=${API_KEY}&date=${yearSelection.current.value}-${monthSelection}-${daySelection.current.value}`\r\n    );\r\n    let data = await response.json();\r\n    setImageUrl(data.url);\r\n    setDescriptionText(data.explanation);\r\n  }\r\n  return (\r\n    <div className=\"main-generator__block\">\r\n      <h3>Choose a date to get a Picture of that Day</h3>\r\n      <div className=\"date-selection\">\r\n        <div className=\"date-selection__select\">\r\n          <label>Day</label>\r\n          <select name=\"day-selection\" defaultValue={1} ref={daySelection}>\r\n            {daysArr.map((day, index) => {\r\n              return (\r\n                <option key={day + index} value={day}>\r\n                  {day}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </div>\r\n        <div className=\"date-selection__select\">\r\n          <label>Month</label>\r\n          <select\r\n            name=\"month-selection\"\r\n            defaultValue={\"January\"}\r\n            ref={monthSelection}\r\n          >\r\n            {monthsArr.map((month, index) => {\r\n              return (\r\n                <option key={month + index} value={month}>\r\n                  {month}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </div>\r\n        <div className=\"date-selection__select\">\r\n          <label>Year</label>\r\n          <select name=\"year-selection\" defaultValue={1996} ref={yearSelection}>\r\n            {yearArr.map((year, index) => {\r\n              return (\r\n                <option key={year + index} value={year}>\r\n                  {year}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </div>\r\n        <button className=\"btn-go\" id=\"btn-get\" onClick={say}>\r\n          Go\r\n        </button>\r\n      </div>\r\n      <p className=\"alert-for-time\">{waitingText}</p>\r\n      <img src={imageUrl} className=\"image-generated\" alt=\"Nasa Day Picture\" />\r\n      <div className=\"description-for-image\">\r\n        <p>{descriptionText}</p>\r\n      </div>\r\n      <div className=\"go-home-block\">\r\n        <NavLink className=\"btn\" to=\"/\">\r\n          Home\r\n        </NavLink>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      <a\r\n        href=\"https://github.com/maximjiculWork?tab=repositories\"\r\n        target=\"_blank\"\r\n      >\r\n        &copy; Maxim Jicul\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport Navbar from \"./Navbar\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport AppDescription from \"./AppDescription\";\nimport MainGenerator from \"./MainGenerator\";\nimport Footer from \"./Footer\";\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <Navbar />\n        <Route exact path=\"/\" component={AppDescription} />\n        <Route path=\"/nasa-pod\" component={MainGenerator} />\n        <Footer />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}